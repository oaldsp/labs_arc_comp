$date
  Wed May 04 09:13:29 2022
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module textio $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module pc_tb $end
$var reg 1 ! finished $end
$var reg 1 " clk $end
$var reg 1 # pc_wr $end
$var reg 1 $ pc_rst $end
$var reg 16 % pc_data_wr[15:0] $end
$var reg 16 & pc_data[15:0] $end
$var reg 15 ' rom_out[14:0] $end
$scope module pc $end
$var reg 1 ( clk $end
$var reg 1 ) rst $end
$var reg 1 * wr_en $end
$var reg 16 + data_in[15:0] $end
$var reg 16 , data_out[15:0] $end
$var reg 16 - data[15:0] $end
$upscope $end
$scope module m_rom $end
$var reg 1 . clk $end
$var reg 16 / endereco[15:0] $end
$var reg 15 0 dado[14:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
0"
1#
1$
b0000000000000001 %
b0000000000000000 &
bUUUUUUUUUUUUUUU '
0(
1)
1*
b0000000000000001 +
b0000000000000000 ,
b0000000000000000 -
0.
b0000000000000000 /
bUUUUUUUUUUUUUUU 0
#50000000
1"
b000000000000001 '
1(
1.
b000000000000001 0
#100000000
0"
0(
0.
#150000000
1"
1(
1.
#200000000
0"
0$
0(
0)
0.
#250000000
1"
b0000000000000010 %
b0000000000000001 &
1(
b0000000000000010 +
b0000000000000001 ,
b0000000000000001 -
1.
b0000000000000001 /
#300000000
0"
0(
0.
#350000000
1"
b0000000000000011 %
b0000000000000010 &
b000000000000010 '
1(
b0000000000000011 +
b0000000000000010 ,
b0000000000000010 -
1.
b0000000000000010 /
b000000000000010 0
#400000000
0"
0(
0.
#450000000
1"
b0000000000000100 %
b0000000000000011 &
b000000000000100 '
1(
b0000000000000100 +
b0000000000000011 ,
b0000000000000011 -
1.
b0000000000000011 /
b000000000000100 0
#500000000
0"
0(
0.
#550000000
1"
b0000000000000101 %
b0000000000000100 &
b000000000001000 '
1(
b0000000000000101 +
b0000000000000100 ,
b0000000000000100 -
1.
b0000000000000100 /
b000000000001000 0
#600000000
0"
0(
0.
#650000000
1"
b0000000000000110 %
b0000000000000101 &
b000000000010000 '
1(
b0000000000000110 +
b0000000000000101 ,
b0000000000000101 -
1.
b0000000000000101 /
b000000000010000 0
#700000000
0"
0(
0.
#750000000
1"
b0000000000000111 %
b0000000000000110 &
b000000000100000 '
1(
b0000000000000111 +
b0000000000000110 ,
b0000000000000110 -
1.
b0000000000000110 /
b000000000100000 0
#800000000
0"
0(
0.
#850000000
1"
b0000000000001000 %
b0000000000000111 &
b000000001000000 '
1(
b0000000000001000 +
b0000000000000111 ,
b0000000000000111 -
1.
b0000000000000111 /
b000000001000000 0
#900000000
0"
0(
0.
#950000000
1"
b0000000000001001 %
b0000000000001000 &
b000000010000000 '
1(
b0000000000001001 +
b0000000000001000 ,
b0000000000001000 -
1.
b0000000000001000 /
b000000010000000 0
#1000000000
0"
0(
0.
#1050000000
1"
b0000000000001010 %
b0000000000001001 &
b000000100000000 '
1(
b0000000000001010 +
b0000000000001001 ,
b0000000000001001 -
1.
b0000000000001001 /
b000000100000000 0
#1100000000
0"
0(
0.
#1150000000
1"
b0000000000001011 %
b0000000000001010 &
b000000010000000 '
1(
b0000000000001011 +
b0000000000001010 ,
b0000000000001010 -
1.
b0000000000001010 /
b000000010000000 0
#1200000000
0"
0(
0.
#1250000000
1"
b0000000000001100 %
b0000000000001011 &
b000000001000000 '
1(
b0000000000001100 +
b0000000000001011 ,
b0000000000001011 -
1.
b0000000000001011 /
b000000001000000 0
#1300000000
0"
0(
0.
#1350000000
1"
b0000000000001101 %
b0000000000001100 &
b000000000100000 '
1(
b0000000000001101 +
b0000000000001100 ,
b0000000000001100 -
1.
b0000000000001100 /
b000000000100000 0
#1400000000
1!
0"
0(
0.
#1450000000
1"
b0000000000001110 %
b0000000000001101 &
b000000000010000 '
1(
b0000000000001110 +
b0000000000001101 ,
b0000000000001101 -
1.
b0000000000001101 /
b000000000010000 0
#1500000000
